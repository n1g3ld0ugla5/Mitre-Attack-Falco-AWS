- rule: Drive-by Compromise
  desc: Detects suspicious behavior in AWS that may indicate a Drive-by Compromise
  condition: (aws.eventName in (CreateAccessKey, DeleteAccessKey, CreateUser, DeleteUser) or aws.eventName starts with "Attach") and aws.sourceIP != "172.31.0.0/16"
  output: "Drive-by Compromise in AWS detected from IP address: %event.source_ip% for user: %event.user_identity.user_name%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [initial_access, drive_by_compromise, T1189]
  
# This rule checks for events with the name "CreateAccessKey", "DeleteAccessKey", "CreateUser", "DeleteUser" and "Attach" in the AWS CloudTrail event
# It also checks that the source IP is not from the VPC range (172.31.0.0/16)
# If it matches, it triggers an alert with the message "Drive-by Compromise in AWS detected from "IP address" for "user" with priority WARNING.
# https://attack.mitre.org/techniques/T1189/

- rule: Steal or Forge Authentication Certificates
  desc: Detect a user requesting a certificate or trying to gain credential access
  condition: >-
    aws.eventName="ResendValidationEmail" or
    aws.eventName="RequestCertificate" and not
    aws.errorCode exists
  output: >-
    An AWS user is requesting an authentication certificate or requesting a validation email
    (requesting user=%aws.user, requesting IP=%aws.sourceIP, AWS region=%aws.region)
  priority: info
  source: aws_cloudtrail  
  tags: [credential_access, steal_forge_auth_creds, T1649]
  
# https://attack.mitre.org/techniques/T1649/
# https://www.gorillastack.com/blog/real-time-events/cloudtrail-event-names/#certificate-manager-cloudtrail
# ResendValidationEmail: An email has been resent that requests domain ownership validation.
# RequestCertificate: An ACM certificate has been requested for use with other services.

- rule: Modify Cloud Compute Infrastructure
  desc: Detect launching of a specified number of instances.
  condition:
    ct.name="RunInstances" and not ct.error exists
  output:
    A number of instances have been launched.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     availability zone=%ct.request.availabilityzone,
     subnet id=%ct.response.subnetid,
     reservation id=%ct.response.reservationid)
  priority: WARNING
  source: aws_cloudtrail  
  tags: [defense_evasion, modify_cloud_compute_infrastructure, T1578]

# Source: https://github.com/falcosecurity/plugins/blob/master/plugins/cloudtrail/rules/aws_cloudtrail_rules.yaml#L270
# Technique: https://attack.mitre.org/techniques/T1578/

- rule: Serverless Execution
  desc: Detects serverless execution in AWS Lambda
  condition: event.event_name = "CreateFunction" and event.request_parameters.function_name starts with "lambda"
  output: "Serverless execution detected in AWS Lambda function: %event.request_parameters.function_name%"
  priority: INFO
  source: aws_cloudtrail
  tags: [execution, serverless_execution, T1648]  

# This rule checks for events with the name "CreateFunction" in the aws_cloudtrail event, and it also checks that the function_name starts with "lambda". 
# This will detect the creation of Lambda function but it won't give you the detailed information such as: 
# - the execution of the function
# - the input and output parameters
# - or the response. 
# To have more detailed information, you can use CloudWatch Logs, CloudWatch events, X-Ray, or other third-party tools in conjunction with CloudTrail.
# https://attack.mitre.org/techniques/T1648/

- rule: Impair Defenses
  desc: The CloudTrail logging has been disabled, this could be potentially impair defenses.
  condition:
    ct.name="StopLogging" and not ct.error exists
  output:
    The CloudTrail logging has been disabled.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     resource name=%ct.request.name)
  priority: WARNING
  source: aws_cloudtrail
  tags: [defense_evasion, impair_defenses, T1562]

# Source: https://github.com/falcosecurity/plugins/blob/254cd1888d96ab2f79e7281ea4dfd54b64489772/plugins/cloudtrail/rules/aws_cloudtrail_rules.yaml#L424
# Technique: https://attack.mitre.org/techniques/T1562/

- rule: Implant Internal Image
  desc: Detect a new image has been implanted in an ECR registry
  condition: >-
    aws.eventSource="ecr.amazonaws.com" and aws.eventName="PutImage" and not
    aws.errorCode exists
  output: >-
    An image has been pushed to ECR registry (region=%aws.region,
    account=%aws.accountId, repository=%aws.ecr.repository,
    tag=%aws.ecr.image.tag) (requesting user=%aws.user, requesting
    IP=%aws.sourceIP, AWS region=%aws.region,
    arn=%jevt.value[/userIdentity/arn], repository=%aws.ecr.repository,
    tag=%aws.ecr.image.tag)
  priority: INFO
  source: aws_cloudtrail  
  tags: [persistence, implant_internal_image, T1525]

# https://attack.mitre.org/techniques/T1525/

- rule: Account Manipulation
  desc: Detects suspicious behavior in AWS that may indicate Account Manipulation
  condition: event.event_name in (CreateAccessKey, DeleteAccessKey, CreateUser, DeleteUser, EnableMFADevice, DisableMFADevice, CreatePolicy, DeletePolicy) and event.user_identity.user_name != "root"
  output: "Account Manipulation in AWS detected from user: %event.user_identity.user_name% for event: %event.event_name%"
  source: aws_cloudtrail
  priority: CRITICAL
  tags: [persistence, account_manipulation, T1098]
  
# The rule checks for suspicious events within the AWS CloudTrail event, and it also checks that the event was not performed by the root user.
# If it matches, it triggers an alert with the message "Account Manipulation in AWS detected from user" - This is a critical alert criteria.
# https://attack.mitre.org/techniques/T1098/

- rule: Domain Policy Modification
  desc: Detects when a domain policy is modified
  condition: evt.type = S3_EVENT and (evt.name = PutBucketPolicy or evt.name = DeleteBucketPolicy) and evt.bucket = "your-bucket-name-here"
  output: "Domain policy modification detected in bucket: your-bucket-name-here"
  source: aws_cloudtrail
  priority: WARNING
  tags: [privilege_escalation, domain_policy_modification, T1098]

# This rule uses the evt.type and evt.name fields to check for events of type "S3_EVENT" and with the name "PutBucketPolicy" or "DeleteBucketPolicy". 
# It also checks that the event is for a specific bucket by using the evt.bucket field. 
# Please note that, you need to replace the your-bucket-name-here with the actual name of your S3 bucket
# You also need to configure the AWS Cloudtrail to send the logs to a S3 bucket and then configure the Falco to read the logs from that S3 bucket.
# https://attack.mitre.org/techniques/T1484/

- rule: Cloud Storage Object Discovery
  desc: Detect a Read operation on objects in watched buckets.
  condition: >-
    not jevt.value[/errorCode] exists and jevt.value[/eventName]="GetObject" and
    jevt.value[/requestParameters/bucketName] in (watched_buckets)
  output: >-
    Detected a Read operation on objects in bucket on watchlist (requesting
    user=%jevt.value[/userIdentity/arn], requesting
    IP=%jevt.value[/sourceIPAddress], AWS region=%jevt.value[/awsRegion], bucket
    name=%jevt.value[/requestParameters/bucketName], object
    key=%jevt.value[/requestParameters/key])
  priority: warning
  source: aws_cloudtrail  
  tags: [discovery, cloud_storage_object_discovery, T1619]
  
# https://attack.mitre.org/techniques/T1619/

- rule: Brute Force
  desc: Detects multiple failed login attempts within a short period of time
  condition: (evt.type = cloudtrail and evt.source = aws_cloudtrail and evt.event.eventname = ConsoleLogin and evt.event.errorcode = "FailedAuthentication") or (evt.type = cloudtrail and evt.source = aws_cloudtrail and evt.event.eventname = "GetSessionToken" and evt.event.errorcode = "AccessDenied")
  output: "Brute force attack detected on AWS console login or session token request"
  priority: ERROR
  source: aws_cloudtrail
  tags: [credential_access, brute_force, T1110]
  
# This rule checks for events of type "cloudtrail" with source "aws_cloudtrail" & eventname "ConsoleLogin" or "GetSessionToken" with errorcodes
# The error codes "FailedAuthentication" or "AccessDenied" respectively have to be triggered within a short period of time. 
# If the rule matches, it will output the message "Brute force attack detected on AWS console login or session token request"
# https://attack.mitre.org/techniques/T1110/

- rule: Account Discovery
  desc: Detects attempts to discover AWS accounts through the use of the 'ListAccounts' action
  condition: aws.event.eventName = "ListAccounts"
  output: "Detected Account Discovery attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% region=%aws_cloudtrail.aws_region%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [discovery, account_discovery, T1087]
  
# The rule will trigger a warning when it detects an event with the name "ListAccounts" in the AWS CloudTrail logs
# This is an indication of an attempt to discover AWS accounts. Additionally, the rule will output the user, action & region information for the event.
# Please note that this is just one example of an Account Discovery technique, there are many other techniques and ways to detect them
# This rule should be used as an example and not as a definitive solution.  
# https://attack.mitre.org/techniques/T1087/

- rule: Cloud Service Discovery
  desc: Detect AWS command execution on unused regions which indicates a discovery attempt on a cloud service
  condition: not aws.errorCode exists and aws.region in (disallowed_aws_regions)
  output: >-
    An AWS command has been executed on an unused region (requesting
    user=%aws.user, requesting IP=%aws.sourceIP, AWS region=%aws.region)
  priority: CRITICAL
  source: aws_cloudtrail  
  tags: [discovery, cloud_service_discovery, T1526]

# https://attack.mitre.org/techniques/T1526/
  
- rule: Internal Spearphishing
  desc: Detects attempts to perform internal spearphishing through the use of email services in AWS
  condition: aws.event.eventName = "SendEmail" and aws.request_parameters.Destination.ToAddresses contains "internal"
  output: "Detected Internal Spearphishing attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% recipients=%aws_cloudtrail.request_parameters.Destination.ToAddresses%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [lateral_movement, internal_spearphishing, T1534]  
  
# This rule will trigger a warning when it detects an event with the name "SendEmail" in the AWS CloudTrail logs
# The recipients of the email contain the word "internal", which is an indication of an attempt to perform internal spearphishing. 
# Additionally, the rule will output the user, action and recipient information for the event.
# Please note that this is just one example of an Internal Spearphishing technique, there are many other techniques and ways to detect them
# This rule should be used as an example and not as a definitive solution.
# https://attack.mitre.org/techniques/T1534/

- rule: Automated Collection in AWS
  desc: Detects attempts to perform automated collection through the use of AWS Lambda
  condition: aws.event.eventName = "CreateFunction" or aws.event.eventName = "InvokeFunction"
  output: "Detected Automated Collection attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% function=%aws_cloudtrail.request_parameters.FunctionName%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [collection, automated_collection, T1119]

# This rule will trigger a warning when it detects an event with the name "CreateFunction" or "InvokeFunction" in the AWS CloudTrail logs.
# These indicate the use of AWS Lambda, a service that allows the creation & execution of scripts, that can be used to automate the collection of data. 
# Additionally, the rule will output the user, action, and the name of the function that was created or invoked.

- rule: Account Access Removal
  desc: Detect the removal of an AWS user account.
  condition: >-
    aws.eventSource="iam.amazonaws.com" and aws.eventName="DeleteUser" and not
    aws.errorCode exists
  output: >-
    An AWS user has been deleted (requesting user=%aws.user, requesting
    IP=%aws.sourceIP, AWS region=%aws.region,
    arn=%jevt.value[/userIdentity/arn], user
    deleted=%jevt.value[/requestParameters/userName])
  priority: info
  source: aws_cloudtrail  
  tags: [impact, account_access_removal, T1531]
  
# This rule will detect a root login without Multi-Factor Authentication (MFA)
# https://attack.mitre.org/techniques/T1531/
# Still struggling to understand how this is account access removal since the user was successfully able to log in
# https://docs.sysdig.com/en/docs/sysdig-secure/sysdig-secure-for-cloud/aws/aws-cloudtrail-falco-rules/#console

- rule: Transfer Data to Cloud Account
  desc: Detects attempts to exfiltrate data to a cloud storage service
  condition: aws.event.eventName = "PutObject" and ( aws.request_parameters.Bucket contains "cloud" or aws.request_parameters.Key contains "cloud")
  output: "Detected Data Exfiltration attempt to cloud storage service in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% bucket=%aws_cloudtrail.request_parameters.Bucket% key=%aws_cloudtrail.request_parameters.Key%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [exfiltration, transfer_data_to_cloud_account, T1537]

# This rule triggers when it detects event with name "PutObject" in AWS CloudTrail logs, & name of bucket/key (file name) contain the word "cloud". 
# Possible indication of attempt to exfiltrate data to a cloud storage service. 
# Additionally, the rule will output the user, action, bucket and key information for the event.
# Please note that this is just one example of a Transfer Data to Cloud Account technique
# There are many other techniques and ways to detect them, this rule should be used as an example and not as a definitive solution.
# https://attack.mitre.org/techniques/T1537/

- rule: Exploit Public-Facing Application
  desc: Detects attempts to exploit a public-facing application on AWS
  condition: aws.eventName = "RunInstances" and aws_event.user_identity.type = "IAMUser" and aws_event.request_parameters.image_id = "ami-*"
  output: "Exploit Public-Facing Application detected for user %user.name% with image_id %cloudtrail_event.request_parameters.image_id%"
  priority: WARNING
  source: aws_cloudtrail  
  tags: [initial_access, exploit_public_facing_application, T1190]

# This rule triggers an when the CloudTrail event "RunInstances" is detected and the user identity type is an IAM user 
# The request parameters must have an image_id starting with 'ami-', it will also include the user name and the image_id in the output.
# https://attack.mitre.org/techniques/T1190/

- rule: Detect User Execution
  desc: Detects user execution on AWS
  condition: aws.eventName = "RunCommand" and aws.user_identity.type = "IAMUser" and aws_event.request_parameters.commands contains "*"
  output: "User Execution detected for user %user.name% with command %cloudtrail_event.request_parameters.commands%"
  priority: WARNING
  source: aws_cloudtrail  
  tags: [execution, user_execution, T1204]
  
# This rule triggers when a CloudTrail event "RunCommand" is detected & the user identity type is an IAM user & request parameters contains commands
# It will also include the user name and the command on the alert output.
# https://attack.mitre.org/techniques/T1204/

- rule: Create Account
  desc: Detect creation of an IAM account.
  condition:
    ct.name="CreateUser" and not ct.error exists
  output:
    A new AWS user has been created
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     new user created=%ct.request.username)
  priority: INFO
  source: aws_cloudtrail
  tags: [persistence, create_account, T1136]  

# This rule is triggered when a new IAM account is created
# https://attack.mitre.org/techniques/T1136/

- rule: Event-Triggered Execution
  desc: Detect any AWS command/event execution.
  condition: not aws.errorCode exists
  output: >-
    An AWS command has been executed (requesting
    user=%aws.user, requesting IP=%aws.sourceIP, AWS region=%aws.region)
  priority: critical
  source: aws_cloudtrail
  tags: [persistence, create_account, T1136]
 
# This rule detects literally ANY event-triggered executions. 
# To detect specific actions - add more conditions using the aws_cloudtrail fields.
# https://attack.mitre.org/techniques/T1546/
  
- rule: Detect CloudTrail Logs Deletion
  desc: Detects deletion of CloudTrail logs, which can be used for defense evasion
  condition: aws.eventName contains "DeleteTrail"
  output: "Detected deletion of CloudTrail logs (user: %user% trail_name: %aws_cloudtrail.trail_name%)"
  priority: WARNING
  source: aws_cloudtrail
  tags: [defense_evasion, hide_artifacts, T1564]

# Rules triggeres when an event with the name "DeleteTrail" is detected in the AWS CloudTrail logs
# https://attack.mitre.org/techniques/T1564/

- rule: Detect IAM User Modification
  desc: Detects modification of IAM users, which can be used to forge web credentials
  condition: aws.eventName contains "UpdateUser"
  output: "Detected modification of IAM user (user: %user% user_name: %aws_cloudtrail.user_name%)"
  priority: WARNING
  enabled: false
  source: aws_cloudtrail
  tags: [credential_access, forge_web_credentials, T1606]

# Rule triggers when an event with the name "UpdateUser" is detected in AWS CloudTrail logs, which indicates that an IAM user was modified. 
# The output message includes the user that modified the user, and the user_name of the IAM user that was modified.
# It detects modification of all IAM users, if you want to detect the modification of specific IAM users, you can add more conditions to avoid false/positives
# https://attack.mitre.org/techniques/T1606/  

- rule: List Buckets
  desc: Detect listing of all S3 buckets.
  condition:
    ct.name="ListBuckets" and not ct.error exists
  output:
    A list of all S3 buckets has been requested.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     host=%ct.request.host)
  priority: WARNING
  enabled: false
  source: aws_cloudtrail  
  tags: [discovery, cloud_infrastructure_discovery, T1580]

# Alternatively, alert on event with the name "DescribeInstances" in the AWS CloudTrail logs, which indicates that an EC2 instances were listed.
# Detect listing of S3 buckets or EC2 instances, which can be used for cloud infrastructure discovery
# https://attack.mitre.org/techniques/T1580/

- rule: Detect S3 Bucket Policy Modification
  desc: Detects modification of S3 bucket policy, which can be used to taint shared content
  condition: aws.eventName contains "PutBucketPolicy"
  output: "Detected modification of S3 bucket policy (user: %user% bucket_name: %aws_cloudtrail.bucket_name%)"
  priority: WARNING
  source: aws_cloudtrail
  tags: [lateral_movement, taint_shared_content, T1080]
  
# Rule triggers when an event with the name "PutBucketPolicy" is detected in the AWS CloudTrail logs, which indicates that S3 bucket policy was modified.
# Rule detects the modification of policies of all S3 buckets. If you want to detect the modification of specific S3 buckets, you can add more conditions.
# Keep in mind that this is just one example of how the technique could be implemented, in practice, it could be implemented in various ways.
# https://attack.mitre.org/techniques/T1080/

- rule: Detect S3 Bucket Listing
  desc: Detects listing of S3 buckets, which can be used for data collection from cloud accounts
  condition: aws.eventName contains "ListBuckets"
  output: "Detected listing of S3 buckets (user: %user%)"
  priority: WARNING
  source: aws_cloudtrail
  tags: [collection, data_from_cloud_accounts, T1530]
  
# Data From Cloud Storage
# This rule will detect the listing of all S3 buckets, if you want to detect the listing of specific S3 buckets, you can add specific conditions
# https://attack.mitre.org/techniques/T1530/  
  
- rule: Detect Phishing Attempts
  desc: Phishing attempts may be logged in CloudTrail events
  condition: aws.eventName = CreateBucket and aws.request_parameters.bucket_name matches "phish*"
  output: "Possible phishing attempt detected via CloudTrail event (user=%user.name event_name=%cloudtrail.event_name bucket_name=%cloudtrail.request_parameters.bucket_name)"
  priority: INFO
  source: aws_cloudtrail  
  tags: [initial_access, phishing, T1566]

# Rule triggers if CloudTrail event is detected with event name "CreateBucket" and the bucket name in the request parameters starts with "phish". 
# This is a simple idea and likely would not catch any real-world phishing attempts
# https://attack.mitre.org/techniques/T1566/

- rule: Password Recovery Requested for Valid Account
  desc: Adversaries may obtain credentials via password recovery workflow for existing accounts as a means of Privilege Escalation
  condition: aws.eventName="PasswordRecoveryRequested" and not aws.errorCode exists
  output: >-
    An AWS IAM password recovery request has been detected. (requesting
    user=%aws.user, requesting IP=%aws.sourceIP, AWS region=%aws.region,
    arn=%jevt.value[/userIdentity/arn], password recovery
    status=%jevt.value[/responseElements/PasswordRecoveryRequested])
  priority: WARNING
  source: aws_cloudtrail
  tags: [initial_access, valid_accounts, T1078]

# https://attack.mitre.org/techniques/T1078/

- rule: Attempt to modify authentication process
  desc: This rule detects attempts to modify the authentication process, a technique used in the Credential Access tactic of MITRE ATT&CK.
  condition: (aws_cloudtrail.event_name = "ModifyAuthenticationInfo" and aws_cloudtrail.error_code = "") or (aws_cloudtrail.event_name = "ModifyIdentityIdFormat" and aws_cloudtrail.error_code = "")
  output: "Attempt to modify authentication process detected in AWS CloudTrail event (user=%aws_cloudtrail.user_identity.user_name% event_name=%aws_cloudtrail.event_name%)"
  priority: WARNING
  source: aws_cloudtrail
  tags: [credential_access, modify_authentication_process, T1556]  
  
# https://attack.mitre.org/techniques/T1556/

- rule: Delete Group
  desc: Detect deletion of a user group - Data Destruction
  condition:
    ct.name="DeleteGroup" and not ct.error exists
  output:
    A user group has been deleted.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     group name=%ct.request.groupname)
  priority: WARNING
  source: aws_cloudtrail  
  tags: [impact, data_destruction, T1485]
  
# https://attack.mitre.org/techniques/T1485/  

- rule: Run Instances from Unused/Unsupported Cloud Region
  desc: >-
    Detect launching of a specified number of instances in a non-approved region.
  condition: >-
    aws.eventName="RunInstances" and not aws.errorCode exists and not aws.region
    in (approved_regions)
  output: >-
    A number of instances have been launched in a non-approved region.
    (requesting user=%aws.user, requesting IP=%aws.sourceIP, AWS
    region=%aws.region, arn=%jevt.value[/userIdentity/arn], availability
    zone=%jevt.value[/requestParameters/availabilityZone], subnet
    id=%jevt.value[/requestParameters/subnetId], reservation
    id=%jevt.value[/responseElements/reservationId], image id=%aws.ec2.imageId)
  priority: WARNING
  source: aws_cloudtrail  
  tags: [defense_evasion, unused_unsupported_cloud_regions, T1535]
  
# https://attack.mitre.org/techniques/T1535/ 

- rule: Steal Application Access Token
  desc: >-
    Detect retrieval of the contents of the encrypted fields SecretString or
    SecretBinary from the specified version of a secret - whichever contains
    content.
  condition: aws.eventName="GetSecretValue" and not aws.errorCode exists
  output: >-
    The contents of the encrypted fields SecretString or SecretBinary from the
    specified version of a secret have been retrieved. (requesting
    user=%aws.user, requesting IP=%aws.sourceIP, AWS region=%aws.region,
    arn=%jevt.value[/userIdentity/arn], secret
    id=%jevt.value[/requestParameters/secretId])
  priority: WARNING
  source: aws_cloudtrail
  tags: [credential_access, steal_application_access_token, T1528]

# https://attack.mitre.org/techniques/T1528/

- rule: Password Policy Discovery
  desc: Detect updating password policy in any case as sign of discovery
  condition: >-
    aws.eventName="UpdateAccountPasswordPolicy" and not aws.errorCode exists
  output: Basically detects any and all changes to password policy (requesting user=%aws.user, requesting IP=%aws.sourceIP, AWS region=%aws.region)
  priority: INFO
  source: aws_cloudtrail  
  tags: [discovery, password_policy_discovery, T1201]
  
# https://attack.mitre.org/techniques/T1201/
