- rule: Drive-by Compromise in AWS
  desc: Detects suspicious behavior in AWS that may indicate a Drive-by Compromise
  condition: (event.event_name in (CreateAccessKey, DeleteAccessKey, CreateUser, DeleteUser) or event.event_name starts with "Attach") and event.source_ip != "172.31.0.0/16"
  output: "Drive-by Compromise in AWS detected from IP address: %event.source_ip% for user: %event.user_identity.user_name%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [initial_access, drive_by_compromise, T1189]
  
# This rule checks for events with the name "CreateAccessKey", "DeleteAccessKey", "CreateUser", "DeleteUser" and "Attach" in the AWS CloudTrail event
# It also checks that the source IP is not from the VPC range (172.31.0.0/16)
# If it matches, it triggers an alert with the message "Drive-by Compromise in AWS detected from "IP address" for "user" with priority WARNING.

- rule: Detect Serverless Execution from Lambda
  desc: Detects serverless execution in AWS Lambda
  condition: event.event_name = "CreateFunction" and event.request_parameters.function_name starts with "lambda"
  output: "Serverless execution detected in AWS Lambda function: %event.request_parameters.function_name%"
  priority: INFO
  source: aws_cloudtrail
  tags: [execution, serverless_execution, T1648]  

# This rule checks for events with the name "CreateFunction" in the aws_cloudtrail event, and it also checks that the function_name starts with "lambda". 
# This will detect the creation of Lambda function but it won't give you the detailed information such as: 
# - the execution of the function
# - the input and output parameters
# - or the response. 
# To have more detailed information, you can use CloudWatch Logs, CloudWatch events, X-Ray, or other third-party tools in conjunction with CloudTrail.

- rule: Detect Account Manipulation in AWS
  desc: Detects suspicious behavior in AWS that may indicate Account Manipulation
  condition: event.event_name in (CreateAccessKey, DeleteAccessKey, CreateUser, DeleteUser, EnableMFADevice, DisableMFADevice, CreatePolicy, DeletePolicy) and event.user_identity.user_name != "root"
  output: "Account Manipulation in AWS detected from user: %event.user_identity.user_name% for event: %event.event_name%"
  source: aws_cloudtrail
  priority: CRITICAL
  tags: [persistence, account_manipulation, T1098]
  
# The rule checks for suspicious events within the AWS CloudTrail event, and it also checks that the event was not performed by the root user.
# If it matches, it triggers an alert with the message "Account Manipulation in AWS detected from user" - This is a critical alert criteria.

- rule: Detect Domain Policy Modification
  desc: Detects when a domain policy is modified
  condition: evt.type = S3_EVENT and (evt.name = PutBucketPolicy or evt.name = DeleteBucketPolicy) and evt.bucket = "your-bucket-name-here"
  output: "Domain policy modification detected in bucket: your-bucket-name-here"
  source: aws_cloudtrail
  priority: WARNING
  tags: [privilege_escalation, domain_policy_modification, T1098]

# This rule uses the evt.type and evt.name fields to check for events of type "S3_EVENT" and with the name "PutBucketPolicy" or "DeleteBucketPolicy". 
# It also checks that the event is for a specific bucket by using the evt.bucket field. 
# Please note that, you need to replace the your-bucket-name-here with the actual name of your S3 bucket
# You also need to configure the AWS Cloudtrail to send the logs to a S3 bucket and then configure the Falco to read the logs from that S3 bucket.

- rule: Detect AWS Brute Force
  desc: Detects multiple failed login attempts within a short period of time
  condition: (evt.type = cloudtrail and evt.source = aws_cloudtrail and evt.event.eventname = ConsoleLogin and evt.event.errorcode = "FailedAuthentication") or (evt.type = cloudtrail and evt.source = aws_cloudtrail and evt.event.eventname = "GetSessionToken" and evt.event.errorcode = "AccessDenied")
  output: "Brute force attack detected on AWS console login or session token request"
  priority: ERROR
  source: aws_cloudtrail
  tags: [credential_access, domain_policy_modification, T1098]
  
# This rule checks for events of type "cloudtrail" with source "aws_cloudtrail" & eventname "ConsoleLogin" or "GetSessionToken" with errorcodes
# The error codes "FailedAuthentication" or "AccessDenied" respectively have to be triggered within a short period of time. 
# If the rule matches, it will output the message "Brute force attack detected on AWS console login or session token request"

- rule: Account Discovery in AWS
  desc: Detects attempts to discover AWS accounts through the use of the 'ListAccounts' action
  condition: aws_cloudtrail.event.eventName = "ListAccounts"
  output: "Detected Account Discovery attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% region=%aws_cloudtrail.aws_region%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [discovery, account_discovery, T1087]
  
# The rule will trigger a warning when it detects an event with the name "ListAccounts" in the AWS CloudTrail logs
# This is an indication of an attempt to discover AWS accounts. Additionally, the rule will output the user, action & region information for the event.

Please note that this is just one example of an Account Discovery technique, there are many other techniques and ways to detect them, this rule should be used as an example and not as a definitive solution.  
  
- rule: Internal Spearphishing in AWS
  desc: Detects attempts to perform internal spearphishing through the use of email services in AWS
  condition: aws_cloudtrail.event.eventName = "SendEmail" and aws_cloudtrail.request_parameters.Destination.ToAddresses contains "internal"
  output: "Detected Internal Spearphishing attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% recipients=%aws_cloudtrail.request_parameters.Destination.ToAddresses%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [lateral_movement, internal_spearphishing, T1534]  
  
# This rule will trigger a warning when it detects an event with the name "SendEmail" in the AWS CloudTrail logs
# The recipients of the email contain the word "internal", which is an indication of an attempt to perform internal spearphishing. 
# Additionally, the rule will output the user, action and recipient information for the event.
# Please note that this is just one example of an Internal Spearphishing technique, there are many other techniques and ways to detect them
# This rule should be used as an example and not as a definitive solution.

- rule: Automated Collection in AWS
  desc: Detects attempts to perform automated collection through the use of AWS Lambda
  condition: aws_cloudtrail.event.eventName = "CreateFunction" or aws_cloudtrail.event.eventName = "InvokeFunction"
  output: "Detected Automated Collection attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% function=%aws_cloudtrail.request_parameters.FunctionName%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [collection, automated_collection, T1119]

# This rule will trigger a warning when it detects an event with the name "CreateFunction" or "InvokeFunction" in the AWS CloudTrail logs.
# These indicate the use of AWS Lambda, a service that allows the creation & execution of scripts, that can be used to automate the collection of data. 
# Additionally, the rule will output the user, action, and the name of the function that was created or invoked.

- rule: Console Root Login Without MFA
  desc: Detect root console login without MFA.
  condition:
    ct.name="ConsoleLogin" and not ct.error exists
    and json.value[/additionalEventData/MFAUsed]="No"
    and ct.user.identitytype!="AssumedRole"
    and json.value[/responseElements/ConsoleLogin]="Success"
    and ct.user.identitytype="Root"
  output:
    Detected a root console login without MFA.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region)
  priority: CRITICAL
  source: aws_cloudtrail  
  tags: [impact, account_access_removal, T1531]
  
# This rule will detect a root login without Multi-Factor Authentication (MFA)
# https://attack.mitre.org/techniques/T1531/
# Still struggling to understand how this is account access removal since the user was successfully able to log in
# https://docs.sysdig.com/en/docs/sysdig-secure/sysdig-secure-for-cloud/aws/aws-cloudtrail-falco-rules/#console

- rule: Transfer Data to Cloud Account
  desc: Detects attempts to exfiltrate data to a cloud storage service
  condition: aws_cloudtrail.event.eventName = "PutObject" and ( aws_cloudtrail.request_parameters.Bucket contains "cloud" or aws_cloudtrail.request_parameters.Key contains "cloud")
  output: "Detected Data Exfiltration attempt to cloud storage service in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% bucket=%aws_cloudtrail.request_parameters.Bucket% key=%aws_cloudtrail.request_parameters.Key%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [exfiltration, transfer_data_to_cloud_account, T1537]

# This rule triggers when it detects event with name "PutObject" in AWS CloudTrail logs, & name of bucket/key (file name) contain the word "cloud". 
# Possible indication of attempt to exfiltrate data to a cloud storage service. 
# Additionally, the rule will output the user, action, bucket and key information for the event.
# Please note that this is just one example of a Transfer Data to Cloud Account technique
# There are many other techniques and ways to detect them, this rule should be used as an example and not as a definitive solution.
# https://attack.mitre.org/techniques/T1537/

- rule: Exploit Public-Facing Application
  desc: Detects attempts to exploit a public-facing application on AWS
  condition: cloudtrail_event.event_name = "RunInstances" and cloudtrail_event.user_identity.type = "IAMUser" and cloudtrail_event.request_parameters.image_id = "ami-*"
  output: "Exploit Public-Facing Application detected for user %user.name% with image_id %cloudtrail_event.request_parameters.image_id%"
  priority: WARNING
  source: aws_cloudtrail  
  tags: [initial_access, exploit_public_facing_application, T1190]

# This rule triggers an when the CloudTrail event "RunInstances" is detected and the user identity type is an IAM user 
# The request parameters must have an image_id starting with 'ami-', it will also include the user name and the image_id in the output.
# https://attack.mitre.org/techniques/T1190/

- rule: Detect User Execution
  desc: Detects user execution on AWS
  condition: cloudtrail_event.event_name = "RunCommand" and cloudtrail_event.user_identity.type = "IAMUser" and cloudtrail_event.request_parameters.commands contains "*"
  output: "User Execution detected for user %user.name% with command %cloudtrail_event.request_parameters.commands%"
  priority: WARNING
  source: aws_cloudtrail  
  tags: [execution, user_execution, T1204]
  
# This rule triggers when a CloudTrail event "RunCommand" is detected & the user identity type is an IAM user & request parameters contains commands
# It will also include the user name and the command on the alert output.
# https://attack.mitre.org/techniques/T1204/

- rule: Create AWS user
  desc: Detect creation of an IAM account.
  condition:
    ct.name="CreateUser" and not ct.error exists
  output:
    A new AWS user has been created
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     new user created=%ct.request.username)
  priority: INFO
  source: aws_cloudtrail
  tags: [persistence, create_account, T1136]  

# This rule is triggered when a new IAM account is created
# https://attack.mitre.org/techniques/T1136/

- rule: Detect Event-Triggered Execution
  desc: Detects event-triggered execution, which can be used for privilege escalation
  condition: aws_cloudtrail.event_name contains "RunCommand" or aws_cloudtrail.event_name contains "Invoke"
  output: "Detected event-triggered execution (user: %user% command: %aws_cloudtrail.command%)"
  priority: WARNING
  source: aws_cloudtrail
  tags: [persistence, create_account, T1136]
 
# Triggers when an event with name "RunCommand" or "Invoke" is detected in the AWS CloudTrail logs, which indicates that a command/function was executed
# This rule detects a wide range of event triggered executions. To detect specific actions - add more conditions using the aws_cloudtrail fields.
# https://attack.mitre.org/techniques/T1546/
  
- rule: Detect CloudTrail Logs Deletion
  desc: Detects deletion of CloudTrail logs, which can be used for defense evasion
  condition: aws_cloudtrail.event_name contains "DeleteTrail"
  output: "Detected deletion of CloudTrail logs (user: %user% trail_name: %aws_cloudtrail.trail_name%)"
  priority: WARNING
  source: aws_cloudtrail
  tags: [defense_evasion, hide_artifacts, T1564]

# Rules triggeres when an event with the name "DeleteTrail" is detected in the AWS CloudTrail logs
# https://attack.mitre.org/techniques/T1564/

- rule: Detect IAM User Modification
  desc: Detects modification of IAM users, which can be used to forge web credentials
  condition: aws_cloudtrail.event_name contains "UpdateUser"
  output: "Detected modification of IAM user (user: %user% user_name: %aws_cloudtrail.user_name%)"
  priority: WARNING
  enabled: false
  source: aws_cloudtrail
  tags: [credential_access, forge_web_credentials, T1606]

# Rule triggers when an event with the name "UpdateUser" is detected in AWS CloudTrail logs, which indicates that an IAM user was modified. 
# The output message includes the user that modified the user, and the user_name of the IAM user that was modified.
# It detects modification of all IAM users, if you want to detect the modification of specific IAM users, you can add more conditions to avoid false/positives
# https://attack.mitre.org/techniques/T1606/  

- rule: List Buckets
  desc: Detect listing of all S3 buckets.
  condition:
    ct.name="ListBuckets" and not ct.error exists
  output:
    A list of all S3 buckets has been requested.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region,
     host=%ct.request.host)
  priority: WARNING
  enabled: false
  source: aws_cloudtrail  
  tags: [discovery, cloud_infrastructure_discovery, T1580]

# Alternatively, alert on event with the name "DescribeInstances" in the AWS CloudTrail logs, which indicates that an EC2 instances were listed.
# Detect listing of S3 buckets or EC2 instances, which can be used for cloud infrastructure discovery
# https://attack.mitre.org/techniques/T1580/
