- rule: Drive-by Compromise in AWS
  desc: Detects suspicious behavior in AWS that may indicate a Drive-by Compromise
  condition: (event.event_name in (CreateAccessKey, DeleteAccessKey, CreateUser, DeleteUser) or event.event_name starts with "Attach") and event.source_ip != "172.31.0.0/16"
  output: "Drive-by Compromise in AWS detected from IP address: %event.source_ip% for user: %event.user_identity.user_name%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [initial_access, drive_by_compromise, T1189]
  
# This rule checks for events with the name "CreateAccessKey", "DeleteAccessKey", "CreateUser", "DeleteUser" and "Attach" in the AWS CloudTrail event
# It also checks that the source IP is not from the VPC range (172.31.0.0/16)
# If it matches, it triggers an alert with the message "Drive-by Compromise in AWS detected from "IP address" for "user" with priority WARNING.

- rule: Detect Serverless Execution from Lambda
  desc: Detects serverless execution in AWS Lambda
  condition: event.event_name = "CreateFunction" and event.request_parameters.function_name starts with "lambda"
  output: "Serverless execution detected in AWS Lambda function: %event.request_parameters.function_name%"
  priority: INFO
  source: aws_cloudtrail
  tags: [execution, serverless_execution, T1648]  

# This rule checks for events with the name "CreateFunction" in the aws_cloudtrail event, and it also checks that the function_name starts with "lambda". 
# This will detect the creation of Lambda function but it won't give you the detailed information such as: 
# - the execution of the function
# - the input and output parameters
# - or the response. 
# To have more detailed information, you can use CloudWatch Logs, CloudWatch events, X-Ray, or other third-party tools in conjunction with CloudTrail.

- rule: Detect Account Manipulation in AWS
  desc: Detects suspicious behavior in AWS that may indicate Account Manipulation
  condition: event.event_name in (CreateAccessKey, DeleteAccessKey, CreateUser, DeleteUser, EnableMFADevice, DisableMFADevice, CreatePolicy, DeletePolicy) and event.user_identity.user_name != "root"
  output: "Account Manipulation in AWS detected from user: %event.user_identity.user_name% for event: %event.event_name%"
  source: aws_cloudtrail
  priority: CRITICAL
  tags: [persistence, account_manipulation, T1098]
  
# The rule checks for suspicious events within the AWS CloudTrail event, and it also checks that the event was not performed by the root user.
# If it matches, it triggers an alert with the message "Account Manipulation in AWS detected from user" - This is a critical alert criteria.

- rule: Detect Domain Policy Modification
  desc: Detects when a domain policy is modified
  condition: evt.type = S3_EVENT and (evt.name = PutBucketPolicy or evt.name = DeleteBucketPolicy) and evt.bucket = "your-bucket-name-here"
  output: "Domain policy modification detected in bucket: your-bucket-name-here"
  source: aws_cloudtrail
  priority: WARNING
  tags: [privilege_escalation, domain_policy_modification, T1098]

# This rule uses the evt.type and evt.name fields to check for events of type "S3_EVENT" and with the name "PutBucketPolicy" or "DeleteBucketPolicy". 
# It also checks that the event is for a specific bucket by using the evt.bucket field. 
# Please note that, you need to replace the your-bucket-name-here with the actual name of your S3 bucket
# You also need to configure the AWS Cloudtrail to send the logs to a S3 bucket and then configure the Falco to read the logs from that S3 bucket.

- rule: Detect AWS Brute Force
  desc: Detects multiple failed login attempts within a short period of time
  condition: (evt.type = cloudtrail and evt.source = aws_cloudtrail and evt.event.eventname = ConsoleLogin and evt.event.errorcode = "FailedAuthentication") or (evt.type = cloudtrail and evt.source = aws_cloudtrail and evt.event.eventname = "GetSessionToken" and evt.event.errorcode = "AccessDenied")
  output: "Brute force attack detected on AWS console login or session token request"
  priority: ERROR
  source: aws_cloudtrail
  tags: [credential_access, domain_policy_modification, T1098]
  
# This rule checks for events of type "cloudtrail" with source "aws_cloudtrail" & eventname "ConsoleLogin" or "GetSessionToken" with errorcodes
# The error codes "FailedAuthentication" or "AccessDenied" respectively have to be triggered within a short period of time. 
# If the rule matches, it will output the message "Brute force attack detected on AWS console login or session token request"

- rule: Account Discovery in AWS
  desc: Detects attempts to discover AWS accounts through the use of the 'ListAccounts' action
  condition: aws_cloudtrail.event.eventName = "ListAccounts"
  output: "Detected Account Discovery attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% region=%aws_cloudtrail.aws_region%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [discovery, account_discovery, T1087]
  
# The rule will trigger a warning when it detects an event with the name "ListAccounts" in the AWS CloudTrail logs
# This is an indication of an attempt to discover AWS accounts. Additionally, the rule will output the user, action & region information for the event.

Please note that this is just one example of an Account Discovery technique, there are many other techniques and ways to detect them, this rule should be used as an example and not as a definitive solution.  
  
- rule: Internal Spearphishing in AWS
  desc: Detects attempts to perform internal spearphishing through the use of email services in AWS
  condition: aws_cloudtrail.event.eventName = "SendEmail" and aws_cloudtrail.request_parameters.Destination.ToAddresses contains "internal"
  output: "Detected Internal Spearphishing attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% recipients=%aws_cloudtrail.request_parameters.Destination.ToAddresses%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [lateral_movement, internal_spearphishing, T1534]  
  
# This rule will trigger a warning when it detects an event with the name "SendEmail" in the AWS CloudTrail logs
# The recipients of the email contain the word "internal", which is an indication of an attempt to perform internal spearphishing. 
# Additionally, the rule will output the user, action and recipient information for the event.
# Please note that this is just one example of an Internal Spearphishing technique, there are many other techniques and ways to detect them
# This rule should be used as an example and not as a definitive solution.

- rule: Automated Collection in AWS
  desc: Detects attempts to perform automated collection through the use of AWS Lambda
  condition: aws_cloudtrail.event.eventName = "CreateFunction" or aws_cloudtrail.event.eventName = "InvokeFunction"
  output: "Detected Automated Collection attempt in AWS: user=%aws_cloudtrail.user_identity.arn% action=%aws_cloudtrail.event.eventName% function=%aws_cloudtrail.request_parameters.FunctionName%"
  priority: WARNING
  source: aws_cloudtrail
  tags: [collection, automated_collection, T1119]

# This rule will trigger a warning when it detects an event with the name "CreateFunction" or "InvokeFunction" in the AWS CloudTrail logs.
# These indicate the use of AWS Lambda, a service that allows the creation & execution of scripts, that can be used to automate the collection of data. 
# Additionally, the rule will output the user, action, and the name of the function that was created or invoked.

- rule: Console Root Login Without MFA
  desc: Detect root console login without MFA.
  condition:
    ct.name="ConsoleLogin" and not ct.error exists
    and json.value[/additionalEventData/MFAUsed]="No"
    and ct.user.identitytype!="AssumedRole"
    and json.value[/responseElements/ConsoleLogin]="Success"
    and ct.user.identitytype="Root"
  output:
    Detected a root console login without MFA.
    (requesting user=%ct.user,
     requesting IP=%ct.srcip,
     AWS region=%ct.region)
  priority: CRITICAL
  source: aws_cloudtrail  
  tags: [impact, account_access_removal, T1531]
  
# This rule will detect a root login without Multi-Factor Authentication (MFA)
# Still struggling to understand how this is account access removal since the user was successfully able to log in





